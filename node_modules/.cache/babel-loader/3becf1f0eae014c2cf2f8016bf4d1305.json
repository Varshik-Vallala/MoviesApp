{"ast":null,"code":"var _jsxFileName = \"/home/workspace/reactjs/coding-practices/moviesApp/src/components/RandomOriginals/index.js\";\nimport { Component } from 'react';\nimport { BsPlayFill } from 'react-icons/bs';\nimport { AiOutlineInfoCircle } from 'react-icons/ai';\nimport Cookies from 'js-cookie';\nimport Header from '../Header';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RandomOriginals extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      randomOriginalData: {}\n    };\n\n    this.getOriginalsData = async () => {\n      const apiKey = Cookies.get('request_token');\n      const url = `https://api.themoviedb.org/3/discover/tv?api_key=${apiKey}`;\n      const options = {\n        method: 'GET'\n      };\n      const response = await fetch(url, options);\n      const data = await response.json();\n      const resultsArr = data.results;\n      const random = Math.floor(Math.random() * resultsArr.length);\n      const updatedOriginalObj = {\n        backdropPath: resultsArr[random].backdrop_path,\n        id: resultsArr[random].id,\n        name: resultsArr[random].name,\n        overview: resultsArr[random].overview\n      };\n      this.setState({\n        randomOriginalData: updatedOriginalObj\n      });\n      console.log(resultsArr);\n    };\n  }\n\n  componentDidMount() {\n    this.getOriginalsData(); // this.renderRandomOriginalMovie()\n  }\n\n  render() {\n    const {\n      randomOriginalData\n    } = this.state;\n    const {\n      backdropPath,\n      name,\n      overview\n    } = randomOriginalData;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"original-image\",\n      style: {\n        backgroundImage: `url(\n          https://image.tmdb.org/t/p/original${backdropPath}\n        )`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"movie-name\",\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"overview-text\",\n          children: overview\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btns-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"play-btn\",\n            children: [/*#__PURE__*/_jsxDEV(BsPlayFill, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"play\",\n              type: \"button\",\n              children: \"Play\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"more-info-btn\",\n            children: [/*#__PURE__*/_jsxDEV(AiOutlineInfoCircle, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"play\",\n              type: \"button\",\n              children: \"More info\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-container\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default RandomOriginals; // class RandomOriginals extends Component {\n//   componentDidMount() {\n//     this.getOriginalImage()\n//   }\n//   getOriginalImage = async () => {\n//     const {originalData} = this.props\n//     const {backdropPath} = originalData\n//     console.log(backdropPath)\n//     // const backdropUrl = `https://image.tmdb.org/t/p/original${backdropPath}`\n//     // const options = {\n//     //   method: 'GET',\n//     // }\n//   }\n//   render() {\n//     return (\n//       <>\n//         <Header />\n//         {/* {this.getOriginalImage()} */}\n//       </>\n//     )\n//   }\n// }\n// export default RandomOriginals\n// // class RandomOriginals extends Component {\n// //   state = {\n// //     originalsData: [],\n// //   }\n// //   componentDidMount() {\n// //     this.getOriginalsData()\n// //   }\n// //   getOriginalsData = async () => {\n// //     const url =\n// //       'https://api.themoviedb.org/3/discover/tv?api_key=970d698cc21f18d0759bec348ed6e217'\n// //     const options = {\n// //       method: 'GET',\n// //     }\n// //     const response = await fetch(url, options)\n// //     if (response.ok) {\n// //       const data = await response.json()\n// //       const updatedOriginalData = data.results.map(eachOriginal => ({\n// //         backdropPath: eachOriginal.backdrop_path,\n// //         id: eachOriginal.id,\n// //         name: eachOriginal.name,\n// //         overview: eachOriginal.overview,\n// //       }))\n// //       this.setState({originalsData: updatedOriginalData})\n// //       const {originalsData} = this.state\n// //       console.log(originalsData)\n// //     }\n// //     const {originalsData} = this.state\n// //     const randomOriginal =\n// //       originalsData[Math.floor(Math.random() * originalsData.length)]\n// //     const {backdropPath, name, overview} = randomOriginal\n// //     console.log(backdropPath)\n// //     return <div>{name}</div>\n// //   }\n// //   renderRandomOriginalMovie = () => {\n// //     const {originalsData} = this.state\n// //     const randomOriginal =\n// //       originalsData[Math.floor(Math.random() * originalsData.length)]\n// //     const {backdropPath, name, overview} = randomOriginal\n// //     return <div>{name}</div>\n// //   }\n// //   render() {\n// //     const {originalsData} = this.state\n// //     // const {name} = originalsData\n// //     // console.log(originalsData)\n// //     return (\n// //       <>\n// //         <Header />\n// //         {/* {this.renderRandomOriginalMovie()} */}\n// //       </>\n// //     )\n// //   }\n// // }","map":{"version":3,"sources":["/home/workspace/reactjs/coding-practices/moviesApp/src/components/RandomOriginals/index.js"],"names":["Component","BsPlayFill","AiOutlineInfoCircle","Cookies","Header","RandomOriginals","state","randomOriginalData","getOriginalsData","apiKey","get","url","options","method","response","fetch","data","json","resultsArr","results","random","Math","floor","length","updatedOriginalObj","backdropPath","backdrop_path","id","name","overview","setState","console","log","componentDidMount","render","backgroundImage"],"mappings":"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","sourcesContent":["import {Component} from 'react'\n\nimport {BsPlayFill} from 'react-icons/bs'\n\nimport {AiOutlineInfoCircle} from 'react-icons/ai'\n\nimport Cookies from 'js-cookie'\n\nimport Header from '../Header'\n\nimport './index.css'\n\nclass RandomOriginals extends Component {\n  state = {randomOriginalData: {}}\n\n  componentDidMount() {\n    this.getOriginalsData()\n    // this.renderRandomOriginalMovie()\n  }\n\n  getOriginalsData = async () => {\n    const apiKey = Cookies.get('request_token')\n\n    const url = `https://api.themoviedb.org/3/discover/tv?api_key=${apiKey}`\n\n    const options = {\n      method: 'GET',\n    }\n\n    const response = await fetch(url, options)\n    const data = await response.json()\n    const resultsArr = data.results\n\n    const random = Math.floor(Math.random() * resultsArr.length)\n\n    const updatedOriginalObj = {\n      backdropPath: resultsArr[random].backdrop_path,\n      id: resultsArr[random].id,\n      name: resultsArr[random].name,\n      overview: resultsArr[random].overview,\n    }\n\n    this.setState({randomOriginalData: updatedOriginalObj})\n\n    console.log(resultsArr)\n  }\n\n  render() {\n    const {randomOriginalData} = this.state\n\n    const {backdropPath, name, overview} = randomOriginalData\n\n    return (\n      <div\n        className=\"original-image\"\n        style={{\n          backgroundImage: `url(\n          https://image.tmdb.org/t/p/original${backdropPath}\n        )`,\n        }}\n      >\n        <div>\n          <Header />\n          <p className=\"movie-name\">{name}</p>\n          <p className=\"overview-text\">{overview}</p>\n          <div className=\"btns-container\">\n            <div className=\"play-btn\">\n              <BsPlayFill />\n              <button className=\"play\" type=\"button\">\n                Play\n              </button>\n            </div>\n            <div className=\"more-info-btn\">\n              <AiOutlineInfoCircle />\n              <button className=\"play\" type=\"button\">\n                More info\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"empty-container\">\n          <p> </p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default RandomOriginals\n\n// class RandomOriginals extends Component {\n//   componentDidMount() {\n//     this.getOriginalImage()\n//   }\n\n//   getOriginalImage = async () => {\n//     const {originalData} = this.props\n//     const {backdropPath} = originalData\n//     console.log(backdropPath)\n\n//     // const backdropUrl = `https://image.tmdb.org/t/p/original${backdropPath}`\n\n//     // const options = {\n//     //   method: 'GET',\n//     // }\n//   }\n\n//   render() {\n//     return (\n//       <>\n//         <Header />\n//         {/* {this.getOriginalImage()} */}\n//       </>\n//     )\n//   }\n// }\n\n// export default RandomOriginals\n\n// // class RandomOriginals extends Component {\n// //   state = {\n// //     originalsData: [],\n// //   }\n\n// //   componentDidMount() {\n// //     this.getOriginalsData()\n// //   }\n\n// //   getOriginalsData = async () => {\n// //     const url =\n// //       'https://api.themoviedb.org/3/discover/tv?api_key=970d698cc21f18d0759bec348ed6e217'\n\n// //     const options = {\n// //       method: 'GET',\n// //     }\n\n// //     const response = await fetch(url, options)\n// //     if (response.ok) {\n// //       const data = await response.json()\n// //       const updatedOriginalData = data.results.map(eachOriginal => ({\n// //         backdropPath: eachOriginal.backdrop_path,\n// //         id: eachOriginal.id,\n// //         name: eachOriginal.name,\n// //         overview: eachOriginal.overview,\n// //       }))\n// //       this.setState({originalsData: updatedOriginalData})\n// //       const {originalsData} = this.state\n\n// //       console.log(originalsData)\n// //     }\n\n// //     const {originalsData} = this.state\n\n// //     const randomOriginal =\n// //       originalsData[Math.floor(Math.random() * originalsData.length)]\n\n// //     const {backdropPath, name, overview} = randomOriginal\n\n// //     console.log(backdropPath)\n\n// //     return <div>{name}</div>\n// //   }\n\n// //   renderRandomOriginalMovie = () => {\n// //     const {originalsData} = this.state\n\n// //     const randomOriginal =\n// //       originalsData[Math.floor(Math.random() * originalsData.length)]\n\n// //     const {backdropPath, name, overview} = randomOriginal\n\n// //     return <div>{name}</div>\n// //   }\n\n// //   render() {\n// //     const {originalsData} = this.state\n// //     // const {name} = originalsData\n\n// //     // console.log(originalsData)\n\n// //     return (\n// //       <>\n// //         <Header />\n// //         {/* {this.renderRandomOriginalMovie()} */}\n// //       </>\n// //     )\n// //   }\n// // }\n"]},"metadata":{},"sourceType":"module"}